set go= 
"设置配色，这里选择的是desert，也有其他方案，在vim中输入:color 在敲tab键可以查看 
"设置背景色，每种配色有两种方案，一个light、一个dark 
set background=light 
"打开语法高亮 
syntax on 
"显示行号 
set number 
"设置缩进有三个取值cindent(c风格)、smartindent(智能模式，其实不觉得有什么智能)、autoindent(简单的与上一行保持一致) 
set cindent 
"在windows版本中vim的退格键模式默认与vi兼容，与我们的使用习惯不太符合，下边这条可以改过来
set backspace=indent,eol,start 
"用空格键替换制表符 
:set expandtab 
"制表符占4个空格 
set tabstop=4 
"默认缩进4个空格大小 
set shiftwidth=4 
"增量式搜索 
set incsearch 
"高亮搜索 
set hlsearch 
"有时中文会显示乱码，用一下几条命令解决 
let &termencoding=&encoding 
" 设置编码
set fenc=utf-8
set encoding=utf-8
set fileencodings=utf-8,gbk,cp936,latin-1
"很多插件都会要求的配置检测文件类型 
:filetype on 
:filetype plugin on 
:filetype indent on 
"下边这个很有用可以根据不同的文件类型执行不同的命令 
"例如：如果是c/c++类型 
:autocmd FileType c,cpp : set foldmethod=syntax 
:autocmd FileType c,cpp : set foldlevel=99 
:autocmd FileType c,cpp :set number 
:autocmd FileType c,cpp :set cindent 
"例如：如果是python类型 
:autocmd FileType python :set number 
:autocmd FileType python : set foldmethod=syntax 
:autocmd FileType python :set smartindent


"/* 当新建 .h .c .hpp .cpp 等文件时自动调用SetTitle 函数*/
autocmd BufNewFile *.[ch],*.hpp,*.cpp exec ":call SetTitle()" 

"/* 加入注释 */
func SetComment()
    call setline(1,"/*==================================") 
    call append(line("."),   "*   Copyright (C) ".strftime("%Y")." All rights reserved.")
    call append(line(".")+1, "*   ") 
    call append(line(".")+2, "*   文件名称：".expand("%:t")) 
    call append(line(".")+3, "*   创 建 者：moon")
    call append(line(".")+4, "*   创建日期：".strftime("%Y年%m月%d日")) 
    call append(line(".")+5, "*   描    述：") 
    call append(line(".")+6, "*")
    call append(line(".")+7, "================================================================*/") 
endfunc

"/* 定义函数SetTitle，自动插入文件头 */
func SetTitle()
    call SetComment()
    if expand("%:e") == 'hpp' 
        call append(line(".")+8, "#ifndef _".toupper(expand("%:t:r"))."_H") 
        call append(line(".")+9, "#define _".toupper(expand("%:t:r"))."_H") 
        call append(line(".")+10, "#ifdef __cplusplus") 
        call append(line(".")+11, "extern \"C\"") 
        call append(line(".")+12, "{") 
        call append(line(".")+13, "#endif") 
        call append(line(".")+14, "") 
        call append(line(".")+15, "#ifdef __cplusplus") 
        call append(line(".")+16, "}") 
        call append(line(".")+17, "#endif") 
        call append(line(".")+18, "#endif //".toupper(expand("%:t:r"))."_H") 
    elseif expand("%:e") == 'h' 
        call append(line(".")+8, "#pragma once") 
    elseif &filetype == 'c' 
        "call append(line(".")+8,"#include \"".expand("%:t:r").".h\"") 
    elseif &filetype == 'cpp' 
        "call append(line(".")+8, "#include \"".expand("%:t:r").".h\"") 
    endif
endfunc


""""""""""""""""""""""""""""""  
" WinManager Config   
" """"""""""""""""""""""""""""""  
"   
   let g:winManagerWindowLayout='FileExplorer|TagList'  
     
     nmap wm :WMToggle<cr>  
     map <silent> <F9> :WMToggle<cr>  
